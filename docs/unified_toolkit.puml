@startuml Unified Toolkit Architecture

' Define the components
package "Unified Toolkit" as UnifiedToolkit {
  class Toolkit {
    + tools: Dict
    + agents: Dict
    + agent_tools: Dict
    + local_tools: Dict
    + mcp_tools: Dict
    + initialize()
    + register_tool()
    + register_agent()
    + get_tool()
    + get_agent()
    + list_tools()
    + list_agents()
    + list_tool_descriptions()
    - _load_from_config()
    - _auto_discover()
    - _discover_tools()
    - _discover_agents()
    - _create_agent_tool_wrapper()
  }
  
  component "Local Tools" as LocalTools {
    component "get_pod_count" as PodCount
    component "get_node_status" as NodeStatus
    component "restart_pod" as RestartPod
    component "scale_deployment" as ScaleDeployment
  }
  
  component "MCP Tools" as MCPTools {
    component "MCP Tool Wrappers" as MCPWrappers
    component "MCP Client" as MCPClient
  }
  
  component "Agent Tools" as AgentTools {
    component "Agent Tool Wrappers" as AgentWrappers
    component "Specialized Agents" as SpecializedAgents
  }
  
  component "Configuration" as Config
  component "Auto-Discovery" as Discovery
}

class AgentCore {
  + toolkit: Toolkit
  + llm
  + framework_registry
  + framework_selector
  + initialize()
  + register_tool()
  + register_agent()
  + register_framework()
  + process_query()
  + register_mcp_tools()
  - _create_mcp_tool_wrapper()
  - _process_direct()
  - _extract_response()
}

component "React Framework" as ReactFramework
component "Plan Framework" as PlanFramework
component "Route Framework" as RouteFramework
component "MCP Servers" as MCPServers

' Define relationships
AgentCore *-- Toolkit : contains
Toolkit *-- LocalTools : manages
Toolkit *-- MCPTools : manages
Toolkit *-- AgentTools : manages
Toolkit ..> Config : loads from
Toolkit ..> Discovery : uses

ReactFramework --> Toolkit : uses tools
PlanFramework --> Toolkit : uses tools
RouteFramework --> SpecializedAgents : uses directly
RouteFramework --> Toolkit : can also use

MCPWrappers --> MCPClient : calls
MCPClient --> MCPServers : invokes
AgentWrappers --> SpecializedAgents : wraps

' Add notes
note right of LocalTools
  Local tools are defined as Python functions
  within the application and registered
  with the unified toolkit
end note

note right of MCPTools
  MCP tools are provided by external MCP servers
  and accessed through the MCP client with
  wrapper functions
end note

note right of AgentTools
  Agent tools are specialized agents wrapped
  as tools, allowing React and Plan frameworks
  to use agents as tools
end note

note right of Config
  Tools and agents can be configured through
  YAML configuration files, allowing for
  flexible and dynamic setup
end note

note right of Discovery
  Auto-discovery mechanism can find and register
  tools and agents automatically based on
  conventions and patterns
end note

' Add sequence diagram for tool invocation
newpage Tool Invocation Flow

actor "Framework" as Framework
participant "Unified Toolkit" as Toolkit
participant "Tool Function" as Tool
participant "Agent Wrapper" as AgentWrapper
participant "Specialized Agent" as Agent
participant "MCP Client" as Client
participant "MCP Server" as Server

' Local tool invocation
Framework -> Toolkit : Look up tool "get_pod_count"
Toolkit --> Framework : Return function reference
Framework -> Tool : Call with arguments
Tool -> Tool : Execute implementation
Tool --> Framework : Return result

' Agent tool invocation
Framework -> Toolkit : Look up tool "agent_cluster_health"
Toolkit --> Framework : Return agent wrapper function
Framework -> AgentWrapper : Call with arguments
AgentWrapper -> Agent : Create minimal state and call
Agent -> Agent : Process state
Agent --> AgentWrapper : Return updated state
AgentWrapper --> Framework : Extract and return response

' MCP tool invocation
Framework -> Toolkit : Look up tool "mcp_weather_get_current_weather"
Toolkit --> Framework : Return wrapper function
Framework -> Client : Call wrapper with arguments
Client -> Server : Send JSON-RPC request
Server -> Server : Process request
Server --> Client : Return JSON-RPC response
Client --> Framework : Return parsed result

' Add class diagram for Toolkit
newpage Toolkit Class Structure

class Toolkit {
  + tools: Dict[str, Callable]
  + agents: Dict[str, Callable]
  + agent_tools: Dict[str, Callable]
  + local_tools: Dict[str, Callable]
  + mcp_tools: Dict[str, Callable]
  + config: Dict[str, Any]
  
  + initialize()
  + register_tool(tool_name: str, tool_func: Callable, tool_type: str)
  + register_agent(agent_type: str, agent: Callable)
  + get_tool(tool_name: str) -> Optional[Callable]
  + get_agent(agent_type: str) -> Optional[Callable]
  + list_tools() -> Dict[str, Callable]
  + list_agents() -> Dict[str, Callable]
  + list_tool_descriptions() -> str
  
  - _load_from_config()
  - _auto_discover()
  - _discover_tools(package_path: str)
  - _discover_agents(package_path: str)
  - _create_agent_tool_wrapper(agent_type: str, agent: Callable) -> Callable
}

class AgentCore {
  + toolkit: Toolkit
  + llm: Any
  + framework_registry: FrameworkRegistry
  + framework_selector: FrameworkSelector
  + config: Dict[str, Any]
  + mcp_tools_initialized: bool
  
  + initialize()
  + register_framework(framework_type: str, framework: BaseLCAgentFramework)
  + register_tool(tool_name: str, tool_func: Callable, tool_type: str)
  + register_agent(agent_type: str, agent: Callable)
  + setup_route_framework()
  + setup_react_framework()
  + setup_plan_framework()
  + process_query(query: str, session_id: Optional[str], chat_history: Optional[List[Dict[str, str]]]) -> Dict[str, Any]
  + register_mcp_tools()
  
  - _create_mcp_tool_wrapper(server_name: str, tool_name: str, description: Optional[str]) -> Callable
  - _process_direct(state: AgentState) -> AgentState
  - _extract_response(state: AgentState) -> str
}

AgentCore *-- Toolkit : contains

' Add component diagram for integration
newpage System Integration

component "IronBox System" as IronBoxSystem {
  component "Agent Core" as AgentCore
  component "Unified Toolkit" as Toolkit
  component "Framework Registry" as FrameworkRegistry
  component "Framework Selector" as FrameworkSelector
  component "LLM Provider" as LLMProvider
  
  component "Agent Frameworks" as AgentFrameworks {
    component "Route Framework" as RouteFramework
    component "React Framework" as ReactFramework
    component "Plan Framework" as PlanFramework
  }
  
  component "Tools" as Tools {
    component "Local Tools" as LocalTools
    component "MCP Tools" as MCPTools
    component "Agent Tools" as AgentTools
  }
  
  component "Agents" as Agents {
    component "Cluster Register Agent" as ClusterRegisterAgent
    component "Cluster Info Agent" as ClusterInfoAgent
    component "Cluster Health Agent" as ClusterHealthAgent
    component "Memory Agent" as MemoryAgent
    component "MCP Agent" as MCPAgent
    component "LLM Agent" as LLMAgent
  }
  
  component "External Systems" as ExternalSystems {
    component "MCP Servers" as MCPServers
    component "Kubernetes Clusters" as KubernetesClusters
  }
}

AgentCore *-- Toolkit
AgentCore *-- FrameworkRegistry
AgentCore *-- FrameworkSelector
AgentCore --> LLMProvider : uses

FrameworkRegistry *-- AgentFrameworks
FrameworkSelector --> AgentFrameworks : selects

Toolkit *-- Tools
Toolkit *-- Agents

MCPTools --> MCPServers : connects to
LocalTools --> KubernetesClusters : interacts with

RouteFramework --> Agents : uses
ReactFramework --> Tools : uses
PlanFramework --> Tools : uses

@enduml
